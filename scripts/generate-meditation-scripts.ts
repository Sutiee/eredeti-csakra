/**
 * Generate Meditation Scripts
 *
 * Generates 7 personalized meditation scripts (one per chakra) using OpenAI GPT-4.
 * Each script is tailored to help unblock and heal a specific chakra.
 *
 * Usage:
 *   npm run generate-meditation-scripts
 *
 * Output:
 *   Creates 7 text files in public/meditations/scripts/
 */

import OpenAI from 'openai';
import { writeFile, mkdir } from 'fs/promises';
import { join } from 'path';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: '.env.local' });

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Chakra metadata
const CHAKRAS = [
  {
    key: 'root',
    name: 'Gy√∂k√©rcsakra',
    nameEn: 'Root Chakra',
    sanskrit: 'Muladhara',
    color: 'v√∂r√∂s',
    position: 'a gerinc alj√°n',
    element: 'f√∂ld',
    keywords: ['biztons√°g', 'stabilit√°s', 'f√∂ldi gy√∂kerek', 't√∫l√©l√©s', 'fizikai test'],
    focus: 'A fizikai biztons√°g√©rzet, a meg√©lhet√©s, a f√∂lddel val√≥ kapcsolat meger≈ës√≠t√©se.',
  },
  {
    key: 'sacral',
    name: 'Szakr√°lis csakra',
    nameEn: 'Sacral Chakra',
    sanskrit: 'Svadhisthana',
    color: 'narancss√°rga',
    position: 'az alhasi ter√ºleten',
    element: 'v√≠z',
    keywords: ['kreativit√°s', '√©rzelmek', 'szexualit√°s', '√∂r√∂m', 'flow'],
    focus: 'Az √©rzelmek szabad √°raml√°sa, a kreativit√°s felszabad√≠t√°sa, az √∂r√∂m megenged√©se.',
  },
  {
    key: 'solar',
    name: 'Napfonat csakra',
    nameEn: 'Solar Plexus Chakra',
    sanskrit: 'Manipura',
    color: 's√°rga',
    position: 'a gyomort√°j√©kon',
    element: 't≈±z',
    keywords: ['er≈ë', '√∂nbizalom', 'akarat', 'szem√©lyes hatalom', 'cselekv√©s'],
    focus: 'A szem√©lyes er≈ë visszaszerz√©se, az √∂nbizalom √©p√≠t√©se, a hat√°rok kijel√∂l√©se.',
  },
  {
    key: 'heart',
    name: 'Sz√≠v csakra',
    nameEn: 'Heart Chakra',
    sanskrit: 'Anahata',
    color: 'z√∂ld/r√≥zsasz√≠n',
    position: 'a sz√≠v t√°j√©k√°n',
    element: 'leveg≈ë',
    keywords: ['szeretet', 'egy√ºtt√©rz√©s', 'megbocs√°t√°s', 'harm√≥nia', 'kapcsolat'],
    focus: 'A szeretet befogad√°sa √©s kisug√°rz√°sa, a m√∫ltbeli s√©relmek gy√≥gy√≠t√°sa, az √∂nszeretet gyakorl√°sa.',
  },
  {
    key: 'throat',
    name: 'Torok csakra',
    nameEn: 'Throat Chakra',
    sanskrit: 'Vishuddha',
    color: 'k√©k',
    position: 'a torok t√°j√©k√°n',
    element: '√©ter',
    keywords: ['kommunik√°ci√≥', 'igazs√°g', '√∂nkifejez√©s', 'kreativit√°s', 'hiteless√©g'],
    focus: 'Az ≈ëszinte √∂nkifejez√©s megenged√©se, az igazs√°g kimond√°sa, a bels≈ë hang meghall√°sa.',
  },
  {
    key: 'third_eye',
    name: 'Harmadik szem',
    nameEn: 'Third Eye Chakra',
    sanskrit: 'Ajna',
    color: 'indig√≥',
    position: 'a homlok k√∂zep√©n',
    element: 'f√©ny',
    keywords: ['intu√≠ci√≥', 'b√∂lcsess√©g', 'l√°t√°sm√≥d', 'bels≈ë tud√°s', 'k√©pzelet'],
    focus: 'Az intu√≠ci√≥ er≈ës√≠t√©se, a bels≈ë l√°t√°s fejleszt√©se, a magasabb tudatoss√°g el√©r√©se.',
  },
  {
    key: 'crown',
    name: 'Korona csakra',
    nameEn: 'Crown Chakra',
    sanskrit: 'Sahasrara',
    color: 'lila/feh√©r',
    position: 'a fejtet≈ën',
    element: '√©ter/gondolat',
    keywords: ['spiritualit√°s', '√∂sszekapcsolts√°g', 'transzcendencia', 'egys√©g', 'tudatoss√°g'],
    focus: 'A spiritu√°lis kapcsolat m√©ly√≠t√©se, az egys√©gtudat megtapasztal√°sa, a fels≈ëbb √©nnel val√≥ kapcsol√≥d√°s.',
  },
];

async function generateMeditationScript(chakra: typeof CHAKRAS[0]): Promise<string> {
  console.log(`üßò Generating meditation script for ${chakra.name}...`);

  const prompt = `√çrj egy 3-4 perces vezetett medit√°ci√≥s sz√∂veget a ${chakra.name} (${chakra.sanskrit}, ${chakra.nameEn}) gy√≥gy√≠t√°s√°ra √©s harmoniz√°l√°s√°ra.

**Csakra r√©szletei:**
- **Poz√≠ci√≥**: ${chakra.position}
- **Sz√≠n**: ${chakra.color}
- **Elem**: ${chakra.element}
- **Kulcsszavak**: ${chakra.keywords.join(', ')}
- **F√≥kusz**: ${chakra.focus}

**A medit√°ci√≥ k√∂vetelm√©nyei:**

1. **Hangnem**: Nyugodt, emp√°tikus, spiritu√°lis. 35+ √©ves n≈ëk sz√°m√°ra k√©sz√ºl, akik √∂nfejleszt√©ssel, spiritualit√°ssal foglalkoznak.

2. **Strukt√∫ra** (3-4 perc):
   - **0:00-0:30** - Bevezet√©s (helyzetbe hoz√°s, l√©gz√©s)
   - **0:30-1:00** - A csakra lokaliz√°l√°sa (figyelem ir√°ny√≠t√°sa a ${chakra.position})
   - **1:00-2:30** - Vezetett vizualiz√°ci√≥ (${chakra.color} f√©ny, ${chakra.element} elem, energia√°raml√°s)
   - **2:30-3:30** - Meger≈ës√≠t≈ë affirm√°ci√≥k (${chakra.keywords.join(', ')})
   - **3:30-4:00** - Lez√°r√°s (k√∂sz√∂netnyilv√°n√≠t√°s, visszavezet√©s)

3. **St√≠lus**:
   - Magyar nyelv≈±, term√©szetes folyamatos sz√∂veg (NEM kell id≈ëb√©lyeg)
   - Kimondhat√≥ form√°ban (ahogy a narr√°tor elmondja)
   - Tartalmazza a sz√ºneteket ("...vegy√©l egy m√©ly l√©legzetet...", "hagyd, hogy ez az √©rz√©s megt√∂lts√∂n...")
   - Szem√©lyes megsz√≥l√≠t√°s (te/t√©ged/neked forma)
   - Vizualiz√°ci√≥s elemek (sz√≠nek, f√©nyek, √©rz√©sek)

4. **Tartalmi elemek**:
   - Konkr√©t vizualiz√°ci√≥: ${chakra.color} sz√≠n≈± f√©ny/energia ${chakra.position}
   - Az ${chakra.element} elem megjelen√≠t√©se metaforikusan
   - 3-5 meger≈ës√≠t≈ë affirm√°ci√≥ be√©p√≠tve a sz√∂vegbe (pl. "√ârz√©keld, ahogy ${chakra.keywords[0]} bet√∂lt...")
   - A csakra felold√°s√°nak √©rzete (meleg, t√°gul√°s, √°raml√°s)

5. **NE legyen benne**:
   - T√∫l szakmai/tudom√°nyos hang
   - T√∫l ezoterikus/bonyolult fogalmak
   - Id≈ëb√©lyegek, c√≠mek, feliratok
   - Instrukci√≥k a narr√°tornak (csak a tiszta sz√∂veg)

**P√©lda st√≠lus** (NE m√°sold le, csak a hangnemet vedd √°t):

"Telepedj le k√©nyelmesen... Engedd, hogy a tested teljesen ellazuljon... Vegy√©l egy m√©ly l√©legzetet, √©s lassan engedd ki... Ir√°ny√≠tsd most a figyelmedet a sz√≠v t√°j√©k√°ra... K√©pzeld el, ahogy egy gy√∂ng√©d, z√∂ld f√©ny kezd kibomlani ebb≈ël a pontb√≥l... Ez a f√©ny a szeretet energi√°ja..."

**Most gener√°ld a ${chakra.name} medit√°ci√≥s sz√∂veg√©t** (kimondhat√≥, folyamatos sz√∂veg, 3-4 perc hossz√∫s√°gban):`;

  const completion = await openai.chat.completions.create({
    model: 'gpt-4-turbo-preview',
    messages: [
      {
        role: 'system',
        content: 'Te egy tapasztalt medit√°ci√≥s coach vagy, aki spiritu√°lis, gy√≥gy√≠t√≥ medit√°ci√≥kat k√©sz√≠t magyar nyelven. A sz√∂vegeid term√©szetesek, nyugtat√≥ak, √©s m√©lyen szem√©lyesek.',
      },
      {
        role: 'user',
        content: prompt,
      },
    ],
    temperature: 0.8,
    max_tokens: 2000,
  });

  const script = completion.choices[0].message.content?.trim() || '';

  console.log(`‚úÖ Generated ${script.length} characters for ${chakra.name}`);

  return script;
}

async function main() {
  console.log('üåü Meditation Script Generator');
  console.log('================================\n');

  // Validate API key
  if (!process.env.OPENAI_API_KEY) {
    console.error('‚ùå Error: OPENAI_API_KEY not found in .env.local');
    process.exit(1);
  }

  // Create output directory
  const outputDir = join(process.cwd(), 'public', 'meditations', 'scripts');
  await mkdir(outputDir, { recursive: true });
  console.log(`üìÅ Output directory: ${outputDir}\n`);

  // Generate scripts for all 7 chakras
  for (const chakra of CHAKRAS) {
    try {
      const script = await generateMeditationScript(chakra);

      // Save to file
      const filename = `${chakra.key}.txt`;
      const filepath = join(outputDir, filename);
      await writeFile(filepath, script, 'utf-8');

      console.log(`üíæ Saved: ${filename}`);
      console.log(`   Length: ${script.length} characters`);
      console.log(`   Words: ~${script.split(/\s+/).length} words\n`);

      // Rate limiting (avoid OpenAI API throttling)
      await new Promise(resolve => setTimeout(resolve, 2000));

    } catch (error) {
      console.error(`‚ùå Error generating ${chakra.name}:`, error);
    }
  }

  console.log('\n‚ú® All meditation scripts generated successfully!');
  console.log(`üìÇ Scripts saved to: ${outputDir}`);
  console.log('\nüìã Next steps:');
  console.log('1. Review the generated scripts in public/meditations/scripts/');
  console.log('2. Edit if needed (adjust tone, length, affirmations)');
  console.log('3. Run: npm run generate-meditation-audio');
}

main().catch(console.error);
