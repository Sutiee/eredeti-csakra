/**
 * Email Testing Script
 *
 * Tests the email sending functionality for both product types
 *
 * Usage:
 * npx tsx scripts/test-email.ts
 */

import { config } from 'dotenv';
import { resolve } from 'path';

// Load environment variables
config({ path: resolve(process.cwd(), '.env.local') });

const TEST_EMAIL = 'laszlo.s.szabo@ecomxpert.hu';
const TEST_NAME = 'Teszt L√°szl√≥';
const TEST_RESULT_ID = '00000000-0000-0000-0000-000000000000';
const SITE_URL = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000';

interface TestEmailParams {
  productType: 'ai_analysis_pdf' | 'workbook_30day';
  productName: string;
}

async function sendTestEmail(params: TestEmailParams): Promise<void> {
  const { productType, productName } = params;

  console.log('\nüìß Teszt email k√ºld√©se...');
  console.log(`   Term√©k t√≠pus: ${productType}`);
  console.log(`   Term√©k n√©v: ${productName}`);
  console.log(`   Email c√≠m: ${TEST_EMAIL}`);
  console.log(`   N√©v: ${TEST_NAME}`);

  try {
    const response = await fetch(`${SITE_URL}/api/send-purchase-email`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name: TEST_NAME,
        email: TEST_EMAIL,
        downloadUrl: 'https://example.com/test-pdf-download-link',
        resultId: TEST_RESULT_ID,
        productName: productName,
        productType: productType,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå Email k√ºld√©s sikertelen:', errorData);
      throw new Error(`Email send failed: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ Email sikeresen elk√ºldve!');
    console.log(`   Email ID: ${data.data?.emailId}`);
    console.log(`   Resend Dashboard: https://resend.com/emails/${data.data?.emailId}`);
  } catch (error) {
    console.error('‚ùå Hiba t√∂rt√©nt:', error);
    throw error;
  }
}

async function runTests(): Promise<void> {
  console.log('üß™ Email Teszt Program');
  console.log('='.repeat(60));

  // Ellen≈ërizz√ºk a sz√ºks√©ges k√∂rnyezeti v√°ltoz√≥kat
  if (!process.env.RESEND_API_KEY) {
    console.error('‚ùå Hi√°nyz√≥ RESEND_API_KEY k√∂rnyezeti v√°ltoz√≥!');
    process.exit(1);
  }

  if (!process.env.RESEND_FROM_EMAIL) {
    console.error('‚ùå Hi√°nyz√≥ RESEND_FROM_EMAIL k√∂rnyezeti v√°ltoz√≥!');
    process.exit(1);
  }

  console.log('\n‚úÖ K√∂rnyezeti v√°ltoz√≥k rendben');
  console.log(`   RESEND_API_KEY: ${process.env.RESEND_API_KEY.substring(0, 10)}...`);
  console.log(`   RESEND_FROM_EMAIL: ${process.env.RESEND_FROM_EMAIL}`);
  console.log(`   SITE_URL: ${SITE_URL}`);

  // Ind√≠tsuk el a Next.js szervert, ha m√©g nem fut
  console.log('\n‚ö†Ô∏è  Gy≈ëz≈ëdj meg r√≥la, hogy a Next.js szerver fut!');
  console.log('   (Futtasd: npm run dev)');
  console.log('\nFolytat√°s 5 m√°sodperc m√∫lva...\n');

  await new Promise(resolve => setTimeout(resolve, 5000));

  try {
    // Teszt 1: AI Analysis PDF
    console.log('\n' + '='.repeat(60));
    console.log('TESZT #1: AI Csakra Elemz√©s PDF');
    console.log('='.repeat(60));
    await sendTestEmail({
      productType: 'ai_analysis_pdf',
      productName: 'Szem√©lyre Szabott Csakra Els≈ëseg√©ly Csomag',
    });

    // V√°runk 2 m√°sodpercet a k√∂vetkez≈ë email el≈ëtt
    console.log('\n‚è≥ V√°rakoz√°s 2 m√°sodperc...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Teszt 2: 30-Day Workbook
    console.log('\n' + '='.repeat(60));
    console.log('TESZT #2: 30 Napos Csakra Munkaf√ºzet');
    console.log('='.repeat(60));
    await sendTestEmail({
      productType: 'workbook_30day',
      productName: '30 Napos Csakra Munkaf√ºzet',
    });

    // √ñsszegz√©s
    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ MINDEN TESZT SIKERES!');
    console.log('='.repeat(60));
    console.log('\nüì¨ Ellen≈ërizd az email fi√≥kodat:');
    console.log(`   ${TEST_EMAIL}`);
    console.log('\nüìä Resend Dashboard:');
    console.log('   https://resend.com/emails');
    console.log('\nüí° Tippek:');
    console.log('   - Ellen≈ërizd a spam mapp√°t is');
    console.log('   - Az emailek 1-2 percen bel√ºl meg kell, hogy √©rkezzenek');
    console.log('   - Ha nem √©rkeznek meg, ellen≈ërizd a Resend Dashboard-ot');
    console.log('');

  } catch (error) {
    console.error('\n‚ùå A teszt sikertelen volt!');
    console.error('Ellen≈ërizd a k√∂vetkez≈ëket:');
    console.error('  1. A Next.js szerver fut? (npm run dev)');
    console.error('  2. A RESEND_API_KEY helyes?');
    console.error('  3. A RESEND_FROM_EMAIL domain hiteles√≠tve van?');
    console.error('');
    process.exit(1);
  }
}

// Futtassuk a teszteket
runTests().catch(error => {
  console.error('Fatal error:', error);
  process.exit(1);
});
